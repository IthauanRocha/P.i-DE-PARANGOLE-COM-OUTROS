# P.i-DE-PARANGOLE-COM-OUTROS
TURMA EI-31

Relatorio: 
Boa tarde, bom dia e boa noite, ai ai ai começar esse projetinho do PI.

Primeiro buscamos uma base visualmente bonita é funcional, achamos um video no YouTube é decidimos organizar o nosso PI através da base do site ensinada pelo video.

Link do video: https://youtu.be/zi3tKRp0fIY

Lets bora explicar o que cada parte do código faz, primeiro vamos fazer essa parte visual para agradar o público e tal.

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" contente="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>SRSCJF-IF</title>
</head>
<body>
    
</body>
</html>

Esse é o nosso início meio triste, mas é isso.

Iniciamos montando uma base de código para fazer as demais importações, já lincamos também ao css e decidimos colocar uma compatibilidade a internet explore nunca se sabe de onde será acessado é as maquinas do ifba usa como navegador padrão.

O código ensinado faz bastante uso do nav. Uma breve explicação do que é: O Elemento HTML de Navegação ( <nav> ) representa uma seção de uma página que aponta para outras páginas ou para outras áreas da página, ou seja, uma seção com links de navegação.

Bom então no body (parte que vai ficar visível no código obvio né) trabalharemos assim, invés de ir para outra página com links vamos usar a mesma pagina apenas ocorrendo transição, onde o usuário pode ir ao sobre, suporte, contato e outros sem sair da página inicial. Essa é uma base, esta com lista é com links, mas futuramente vamos tirar: 

<body>
    <nav class="nav">
        <div class="nav-logo">
            <p>SRSCJF-IF</p>
        </div>
        <div class="nav-menu">
            <ul>
                <li><a href="#" class="link">Inicio</a></li>
                <li><a href="#" class="link">Sobre</a></li>
                <li><a href="#" class="link">Não definido</a></li>
                <li><a href="#" class="link">Suporte</a></li>
            </ul>
        </div>
    </nav> 

Então agora é necessário criar os botões de login e de cadastro, vale ressaltar que eles irão ficar na parte superior à direita. 

        <div class="nav-button">
            <button class="btn" id="loginBtn">Login</button>
            <button class="btn" id="registroBtn">Cadastre-se</button>
        </div>
        <div class="nav-menu-btn">
            <i class="bx bx-menu" onclick="menuFunction()"></i>
        </div>

Breve explicação sobre p "i" usado: A tag <i> pode representar uma parte do texto com uma diferença semântica, na qual a representação tipográfica padrão é no tipo itálico. Isso significa que os navegadores continuarão a apresentar o conteúdo em itálico, mas, conforme o definido, isso não é mais requerido.

onclick executa determinada funcionalidade quando um botão é clicado. Nesse caso ele realiza nossa função de transição de página.

Bom por hoje é só.

Código por enquanto:

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" contente="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>SRSCJF-IF</title>
</head>
<body>
    <nav class="nav">
        <div class="nav-logo">
            <p>SRSCJF-IF</p>
        </div>
        <div class="nav-menu">
            <ul>
                <li><a href="#" class="link active">Inicio</a></li>
                <li><a href="#" class="link">Sobre</a></li>
                <li><a href="#" class="link">Não definido</a></li>
                <li><a href="#" class="link">Suporte</a></li>
            </ul>
        </div>
        <div class="nav-button">
            <button class="btn" id="loginBtn">Login</button>
            <button class="btn" id="registroBtn">Cadastre-se</button>
        </div>
        <div class="nav-menu-btn">
            <i class="bx bx-menu" onclick="menuFunction()"></i>
        </div>
    </nav>
</body>
</html>

29/06/2023
Victor Hugo 


Hoje é só dia, cansado demais em pleno recesso tendo que se preocupar com código o Tristeza.

Lets bora.

Agora vamos da continuidade ao código:

Primeiro vamos criar um contêiner (div) para ter dois tipos de div dentro dele, a de login e cadastro.

    <div class="form-box">

                <div class="login-container" id="login">
            <div class="top">
                <span>Não tem uma conta? <a href="#" onclick="()">Cadastre-se</a></span>
                <header>Login</header>
            </div> 

Antes de dar continuidade é necessário explicar o que é span, pois será realizado uso dele: O elemento HTML <span> é um contêiner genérico em linha para conteúdo fraseado, que não representa nada por natureza. Ele pode ser usado para agrupar elementos para fins de estilo (usando os atributos class ou id ), ou para compartilhar valores de atributos como

Dando continuidade ao código só ira ser criado input para pedir as informações do login, vale ressaltar que essa parte ira sofrer bastante alteração já que pode ser necessário criar mais informações no caso o login e cadastro.

            <div class="input-box">
                <input type="text" class="input-field" placeholder="Matrícula">
                <i class="bx bx-user"></i>
            </div>
            <div class="input-box">
                <input type="password" class="input-field" placeholder="Senha">
                <i class="bx bx-lock-alt"></i>
            </div>
            <div class="input-box">
                <input type="submit" class="submit" value="Entrar">
            </div>

Complementos a pagina de login necessária para um código.


            <div class="two-col">
                <div class="one">
                    <input type="checkbox" id="login-check">
                    <label for="login-check">Relembre-me</label>
                </div>
                <div class="two">
                    <label><a href="#">Esqueceu a senha?</a></label>
                </div>
            </div>
        </div>

Agora indo para parte de cadastro, ira ser do mesmo modo, só que será usado uma maior quantidade de div, ressaltando que ira sofrer alterações pelos mesmo motivos anteriores (sei que vocês do meu grupo vão só passar o olho então os motivos é: pode ser necessário pedir mais informações, pode ocorrer de alterar o modo de pedir que eu acho bem difícil, pois input são muito mais interessantes, resumindo situações adversas pode mudar o código nessa parte principalmente). 

Outro ponto que já vai ser adicionado uma função com o nome "login". Meu Deus tenho que explicar isso direito se não vão ficar voando. 

A função login() é um manipulador de eventos chamado quando o botão de login é clicado. Ela ajusta a posição dos elementos de login e registro, alterando suas propriedades da esquerda e direita no CSS para mostrar o formulário de login e ocultar o formulário de registro. Também altera as classes dos botões para realçar visualmente o botão de login selecionado e ajusta a opacidade dos formulários para mostrar ou ocultar corretamente o conteúdo (basicamente um vai ficar mais escuro que o outro).

A função cadastro() é um manipulador de eventos chamado quando o botão de registro é clicado. Ela faz o oposto da função login(), ajustando as posições dos elementos para mostrar o formulário de registro e ocultar o formulário de login. Também altera as classes dos botões para realçar visualmente o botão de registro selecionado e ajusta a opacidade dos formulários.


Código: 
        <div class="register-container" id="register">
            <div class="top">
                <span>Já tem uma conta? <a href="#" onclick="login()">Login</a></span>
                <header>Cadastre-se</header>
            </div>
            <div class="two-forms">
                <div class="input-box">
                    <input type="text" class="input-field" placeholder="Nome">
                    <i class="bx bx-user"></i>
                </div>
                <div class="input-box">
                    <input type="text" class="input-field" placeholder="Matrícula">
                    <i class="bx bx-user"></i>
                </div>
            </div>
            <div class="input-box">
                <input type="text" class="input-field" placeholder="Email">
                <i class="bx bx-envelope"></i>
            </div>
            <div class="input-box">
                <input type="password" class="input-field" placeholder="Senha">
                <i class="bx bx-lock-alt"></i>
            </div>
            <div class="input-box">
                <input type="submit" class="submit" value="Register">
            </div>
            <div class="two-col">
                <div class="one">
                    <input type="checkbox" id="register-check">
                    <label for="register-check"> Relembre-me</label>
                </div>
                <div class="two">
                    <label><a href="#">Termos & condições</a></label>
                </div>
            </div>
        </div>
    </div>
</div>

Bom a parte visual (body) sem css é basicamente isso espero que tenha explicado de um jeito que da entender para todos.

É claro que já estão com suas devidas classes aplicadas, mas no git irei posta o código completo ele dá uma visualização bacana de como fica sem css.

Bom complementando o código principal temos script: <script> O elemento HTML <script> é usado para incluir ou referenciar um script executável. Usado para fazer a ligação entre o JavaScript e o HTML. Sempre que for preciso usar JavaScript no HTML, deve-se colocar a tag <script> no lugar correto.

Primeiro script:

<script>
   
   function menuFunction() {
    var i = document.getElementById("navMenu");
    if(i.className === "nav-menu") {
        i.className += " responsive";
    } else {
        i.className = "nav-menu";
    }
   }
 
</script>

Lembra que chamei essa função no código la em cima então A função menuFunction() é um manipulador de eventos acionado quando o ícone de menu é clicado. Ele obtém o elemento com o ID navMenu e verifica sua classe. Se a classe for igual a "nav-menu", adiciona a classe "responsive" para fazer o menu ficar visível em dispositivos móveis. Caso contrário, remove a classe "responsive" para ocultar o menu.

Segundo script:

<script>
    var a = document.getElementById("loginBtn");
    var b = document.getElementById("registerBtn");
    var x = document.getElementById("login");
    var y = document.getElementById("register");
    function login() {
        x.style.left = "4px";
        y.style.right = "-520px";
        a.className += " white-btn";
        b.className = "btn";
        x.style.opacity = 1;
        y.style.opacity = 0;
    }
    function register() {
        x.style.left = "-510px";
        y.style.right = "5px";
        a.className = "btn";
        b.className += " white-btn";
        x.style.opacity = 0;
        y.style.opacity = 1;
    }

    
A variável 'a' é atribuída ao elemento do botão de login com o ID loginBtn.


    
A variável 'b' é atribuída ao elemento do botão de registro com o ID registerBtn.


    
A variável 'x' é atribuída ao elemento do formulário de login com o ID login.


    
A variável 'y' é atribuída ao elemento do formulário de registro com o ID register.

E aí que entre a função já explicada que é login e cadastro, vou da ctrl c + ctrl v:





A função login() é um manipulador de eventos chamado quando o botão de login é clicado. Ela ajusta a posição dos elementos de login e registro, alterando suas propriedades da esquerda e direita no CSS para mostrar o formulário de login e ocultar o formulário de registro. Também altera as classes dos botões para realçar visualmente o botão de login selecionado e ajusta a opacidade dos formulários para mostrar ou ocultar corretamente o conteúdo (basicamente um vai ficar mais escuro que o outro).

A função cadastro() é um manipulador de eventos chamado quando o botão de registro é clicado. Ela faz o oposto da função login(), ajustando as posições dos elementos para mostrar o formulário de registro e ocultar o formulário de login. Também altera as classes dos botões para realçar visualmente o botão de registro selecionado e ajusta a opacidade dos formulários.

Essas funções permitem alternar entre os formulários de login e cadastro quando os botões são clicados.

Então isso e tudo por hoje agora basta explicar o CSS.

Ah só para terminar mesmo.

</body>
</html>


01/07/2023
Victor hugo

Boa tarde, pessoas. Bom hoje irei explicar todo o css é amanha irei fazer toda a lógica do php.

Lets bora,

@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500&display=swap');
*{  
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
}

Esse é parte importa uma fonte a Poppings com diferentes pesos.

Vocês se pergunta: como assim?

Eu respondo: os diferentes pesos se referem às variações de espessura ou espessura relativa das letras em uma determinada família de fontes. Nesse caso, 400 se refere ao peso normal ou regular da fonte Poppins, enquanto 500 se refere a um peso um pouco mais pesado.

O restante ira mexer nas margens e preenchimento interno, no caso como esta em zero ira remover.

Também criara uma caixa de modelo como 'border-box' é caso a fonte poppins não funcione a fonte sans-serif funcionara como substituta.

body{
    background: url("images/1.jpg");
    background-size: cover;
    background-repeat: no-repeat;
    background-attachment: fixed;
    overflow: hidden;
}
.wrapper{
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 110vh;
    background: rgba(39, 39, 39, 0.4);
}
.nav{
    position: fixed;
    top: 0;
    display: flex;
    justify-content: space-around;
    width: 100%;
    height: 100px;
    line-height: 100px;
    background: linear-gradient(rgba(39,39,39, 0.6), transparent);
    z-index: 100;
}
.nav-logo p{
    color: white;
    font-size: 25px;
    font-weight: 600;
}
.nav-menu ul{
    display: flex;
}
.nav-menu ul li{
    list-style-type: none;
}
.nav-menu ul li .link{
    text-decoration: none;
    font-weight: 500;
    color: #fff;
    padding-bottom: 15px;
    margin: 0 25px;
}
.link:hover, .active{
    border-bottom: 2px solid #fff;
}
.nav-button .btn{
    width: 130px;
    height: 40px;
    font-weight: 500;
    background: rgba(255, 255, 255, 0.4);
    border: none;
    border-radius: 30px;
    cursor: pointer;
    transition: .3s ease;
}
.btn:hover{
    background: rgba(255, 255, 255, 0.3);
}
#registerBtn{
    margin-left: 15px;
}
.btn.white-btn{
    background: rgba(255, 255, 255, 0.7);
}
.btn.btn.white-btn:hover{
    background: rgba(255, 255, 255, 0.5);
}
.nav-menu-btn{
    display: none;
}

Bom de forma resumida iremos definir o bory com uma imagem deixá-la de modo que fique em tela cheia é que não fiquem várias imagens repetidas, após criaremos um contêiner que é flexível, centralizado vertical e horizontalmente.

O restante nada mais do que margens para botoes, uso de fonte, modelagem de cor, estilo de botão e tal.

.form-box{
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 512px;
    height: 420px;
    overflow: hidden;
    z-index: 2;
}
.login-container{
    position: absolute;
    left: 4px;
    width: 500px;
    display: flex;
    flex-direction: column;
    transition: .5s ease-in-out;
}
.register-container{
    position: absolute;
    right: -520px;
    width: 500px;
    display: flex;
    flex-direction: column;
    transition: .5s ease-in-out;
}
.top span{
    color: #fff;
    font-size: small;
    padding: 10px 0;
    display: flex;
    justify-content: center;
}
.top span a{
    font-weight: 500;
    color: #fff;
    margin-left: 5px;
}
header{
    color: #fff;
    font-size: 30px;
    text-align: center;
    padding: 10px 0 30px 0;
}
.two-forms{
    display: flex;
    gap: 10px;
}
.input-field{
    font-size: 15px;
    background: rgba(255, 255, 255, 0.2);
    color: #fff;
    height: 50px;
    width: 100%;
    padding: 0 10px 0 45px;
    border: none;
    border-radius: 30px;
    outline: none;
    transition: .2s ease;
}
.input-field:hover, .input-field:focus{
    background: rgba(255, 255, 255, 0.25);
}
::-webkit-input-placeholder{
    color: #fff;
}
.input-box i{
    position: relative;
    top: -35px;
    left: 17px;
    color: #fff;
}
.submit{
    font-size: 15px;
    font-weight: 500;
    color: black;
    height: 45px;
    width: 100%;
    border: none;
    border-radius: 30px;
    outline: none;
    background: rgba(255, 255, 255, 0.7);
    cursor: pointer;
    transition: .3s ease-in-out;
}
.submit:hover{
    background: rgba(255, 255, 255, 0.5);
    box-shadow: 1px 5px 7px 1px rgba(0, 0, 0, 0.2);
}
.two-col{
    display: flex;
    justify-content: space-between;
    color: #fff;
    font-size: small;
    margin-top: 10px;
}
.two-col .one{
    display: flex;
    gap: 5px;
}
.two label a{
    text-decoration: none;
    color: #fff;
}
.two label a:hover{
    text-decoration: underline;
}
@media only screen and (max-width: 786px){
    .nav-button{
        display: none;
    }
    .nav-menu.responsive{
        top: 100px;
    }
    .nav-menu{
        position: absolute;
        top: -800px;
        display: flex;
        justify-content: center;
        background: rgba(255, 255, 255, 0.2);
        width: 100%;
        height: 90vh;
        backdrop-filter: blur(20px);
        transition: .3s;
    }
    .nav-menu ul{
        flex-direction: column;
        text-align: center;
    }
    .nav-menu-btn{
        display: block;
    }
    .nav-menu-btn i{
        font-size: 25px;
        color: #fff;
        padding: 10px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        cursor: pointer;
        transition: .3s;
    }
    .nav-menu-btn i:hover{
        background: rgba(255, 255, 255, 0.15);
    }
}
@media only screen and (max-width: 540px) {
    .wrapper{
        min-height: 100vh;
    }
    .form-box{
        width: 100%;
        height: 500px;
    }
    .register-container, .login-container{
        width: 100%;
        padding: 0 20px;
    }
    .register-container .two-forms{
        flex-direction: column;
        gap: 0;
    }
}

Essa parte do css ira ser responsável pela parte visual do login é cadastro.

.form-box: define um contêiner flexível para o formulário, posicionado de forma relativa. Ele possui um tamanho fixo de 512px por 420px, com conteúdo que pode transbordar oculto. O z-index: 2 define a camada de sobreposição desse elemento.

.login-container e .register-container: esses seletores definem contêineres para o formulário de login e registro, respectivamente. Eles são posicionados de forma absoluta em relação ao elemento.form-box, com largura fixa de 500px. O.login-container é exibido por padrão, enquanto o .register-container é posicionado fora da visualização usando right: -520px. A transição .5s ease-in-out cria uma animação suave ao alternar entre os contêineres.

.top span: Define estilos para uma seção superior do formulário. Define a cor do texto como branco, tamanho da fonte pequeno, adiciona preenchimento e centraliza o conteúdo.

.top span a: Define estilos para links dentro da seção superior do formulário. Define a cor e o peso da fonte, adiciona uma margem à esquerda e remove a decoração de link padrão.

header: Define estilos para o cabeçalho do formulário. Define a cor do texto como branco, tamanho da fonte de 30px, alinhamento central e adiciona preenchimento.

.two-forms: Define um contêiner flexível que contém dois formulários, separados por um espaçamento de 10px.

.input-field: Define estilos para campos de entrada de texto. Define a cor de fundo, cor do texto, altura, largura, preenchimento, borda e borda arredondada. Também define uma transição suave ao passar o mouse sobre o campo de entrada.

::-webkit-input-placeholder: Define estilos para o espaço reservado (placeholder) em campos de entrada do WebKit (Chrome, Safari). Define a cor do texto como branco.

.input-box i: Define estilos para os ícones dentro das caixas de entrada. Define a posição, cor e deslocamento.

.submit: Define estilos para o botão de envio. Define a fonte, cor, altura, largura, borda, borda arredondada, cor de fundo e efeitos de transição.

.two-col e .two-col .one: Define estilos para seções com duas colunas de texto. Define a exibição flexível, espaçamento entre os elementos e cor do texto.

@media only screen and (max-width: ...): Essas regras de mídia aplicam estilos específicos quando a largura da tela está abaixo de determinados valores. Por exemplo, esconder o botão de menu de navegação em telas menores, ajustar o layout para telas menores e alterar o tamanho do contêiner do formulário. Essas regras ajudam a tornar o site responsivo e adaptável a diferentes dispositivos.

Explicação feita por Ia, pois são apenas formação da parte visual não tem muita relevância a não ser deixar o código visualmente bonito é efetuar alguma animação. Quero que der um foco a 
@media only screen and (max-width: ...)
isso não foi ensinado em sala de aula, mas assistindo alguns vídeos de profissionais na área, isso e muito utilizado em sites de grandes empresas, ampliando a explicação da IA, pois além de ser uma ferramentar rasa com pouca explicação concreta, temos que essa regra é aplicada quando a largura da tela é igual ou menor (quando é acessada por um dispositivo móvel ela ira mudar) que 786 pixels (um exemplo). Dentro dessa regra, existem estilos específicos para alterar o layout do menu de navegação, tornando-o responsivo. Por exemplo, o botão de menu é exibido, a posição do menu é ajustada, e outros estilos são aplicados para garantir uma melhor experiência em telas menores.

Css completo:
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500&display=swap');
*{  
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
}
body{
    background: url("images/1.jpg");
    background-size: cover;
    background-repeat: no-repeat;
    background-attachment: fixed;
    overflow: hidden;
}
.wrapper{
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 110vh;
    background: rgba(39, 39, 39, 0.4);
}
.nav{
    position: fixed;
    top: 0;
    display: flex;
    justify-content: space-around;
    width: 100%;
    height: 100px;
    line-height: 100px;
    background: linear-gradient(rgba(39,39,39, 0.6), transparent);
    z-index: 100;
}
.nav-logo p{
    color: white;
    font-size: 25px;
    font-weight: 600;
}
.nav-menu ul{
    display: flex;
}
.nav-menu ul li{
    list-style-type: none;
}
.nav-menu ul li .link{
    text-decoration: none;
    font-weight: 500;
    color: #fff;
    padding-bottom: 15px;
    margin: 0 25px;
}
.link:hover, .active{
    border-bottom: 2px solid #fff;
}
.nav-button .btn{
    width: 130px;
    height: 40px;
    font-weight: 500;
    background: rgba(255, 255, 255, 0.4);
    border: none;
    border-radius: 30px;
    cursor: pointer;
    transition: .3s ease;
}
.btn:hover{
    background: rgba(255, 255, 255, 0.3);
}
#registerBtn{
    margin-left: 15px;
}
.btn.white-btn{
    background: rgba(255, 255, 255, 0.7);
}
.btn.btn.white-btn:hover{
    background: rgba(255, 255, 255, 0.5);
}
.nav-menu-btn{
    display: none;
}
.form-box{
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 512px;
    height: 420px;
    overflow: hidden;
    z-index: 2;
}
.login-container{
    position: absolute;
    left: 4px;
    width: 500px;
    display: flex;
    flex-direction: column;
    transition: .5s ease-in-out;
}
.register-container{
    position: absolute;
    right: -520px;
    width: 500px;
    display: flex;
    flex-direction: column;
    transition: .5s ease-in-out;
}
.top span{
    color: #fff;
    font-size: small;
    padding: 10px 0;
    display: flex;
    justify-content: center;
}
.top span a{
    font-weight: 500;
    color: #fff;
    margin-left: 5px;
}
header{
    color: #fff;
    font-size: 30px;
    text-align: center;
    padding: 10px 0 30px 0;
}
.two-forms{
    display: flex;
    gap: 10px;
}
.input-field{
    font-size: 15px;
    background: rgba(255, 255, 255, 0.2);
    color: #fff;
    height: 50px;
    width: 100%;
    padding: 0 10px 0 45px;
    border: none;
    border-radius: 30px;
    outline: none;
    transition: .2s ease;
}
.input-field:hover, .input-field:focus{
    background: rgba(255, 255, 255, 0.25);
}
::-webkit-input-placeholder{
    color: #fff;
}
.input-box i{
    position: relative;
    top: -35px;
    left: 17px;
    color: #fff;
}
.submit{
    font-size: 15px;
    font-weight: 500;
    color: black;
    height: 45px;
    width: 100%;
    border: none;
    border-radius: 30px;
    outline: none;
    background: rgba(255, 255, 255, 0.7);
    cursor: pointer;
    transition: .3s ease-in-out;
}
.submit:hover{
    background: rgba(255, 255, 255, 0.5);
    box-shadow: 1px 5px 7px 1px rgba(0, 0, 0, 0.2);
}
.two-col{
    display: flex;
    justify-content: space-between;
    color: #fff;
    font-size: small;
    margin-top: 10px;
}
.two-col .one{
    display: flex;
    gap: 5px;
}
.two label a{
    text-decoration: none;
    color: #fff;
}
.two label a:hover{
    text-decoration: underline;
}
@media only screen and (max-width: 786px){
    .nav-button{
        display: none;
    }
    .nav-menu.responsive{
        top: 100px;
    }
    .nav-menu{
        position: absolute;
        top: -800px;
        display: flex;
        justify-content: center;
        background: rgba(255, 255, 255, 0.2);
        width: 100%;
        height: 90vh;
        backdrop-filter: blur(20px);
        transition: .3s;
    }
    .nav-menu ul{
        flex-direction: column;
        text-align: center;
    }
    .nav-menu-btn{
        display: block;
    }
    .nav-menu-btn i{
        font-size: 25px;
        color: #fff;
        padding: 10px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        cursor: pointer;
        transition: .3s;
    }
    .nav-menu-btn i:hover{
        background: rgba(255, 255, 255, 0.15);
    }
}
@media only screen and (max-width: 540px) {
    .wrapper{
        min-height: 100vh;
    }
    .form-box{
        width: 100%;
        height: 500px;
    }
    .register-container, .login-container{
        width: 100%;
        padding: 0 20px;
    }
    .register-container .two-forms{
        flex-direction: column;
        gap: 0;
    }
}

Bom por hoje é só, valeu bons estudo pessoal do meu grupo qualquer dúvida me mande mensagem.

Victor Hugo;

09/07/2023

Boa tarde, pessoas então falei que ia fazer o php hoje, menti olhando o slide disponibilizado tem muito mais informações que é necessário colocar no código, então eu acrescentei mais coisas no código, como:

01- Poder escolher o curso como opção e não para escrever.

02 - Escolher a turma como opção, é dependendo do curso que escolher ira aparecer as opções, por exemplo, se escolher informática ira aparecer como turma ei11,ei12, etc... assim como os outros cursos.

03 - devido a isso a parte do cadastro ficou imenso então tive que por uma barra de rolagem, sim, tem uma barra de rolagem SO que estou apanhando muito, pois ela funciona com o sroll do mouse, que se clicamos na região que esta a barra de rolagem invisível não funciona, quem usa notebook perdão.

04 - Para fazer tudo isso com as turmas tive que fazer um java script apanhei muito também, até agora to apanhando, mas com uns 20 tutoriais no YouTube é copiando muito código feito por eles rsrsrs ta dando certo:

seguem as alterações com as explicações:

            <div class="input-box">
                <select id="curso" class="input-field" onchange="updateTurmaOptions()" required>
                    <option value="" selected disabled>Curso</option>
                    <option value="meio_ambiente">Meio Ambiente</option>
                    <option value="edificacoes">Edificações</option>
                    <option value="informatica">Informática</option>
                </select>
                <i class="bx bxs-school"></i>
            </div>
            <div class="input-box">
                <select id="turma" class="input-field" required>
                    <option value="" selected disabled>Turma</option>
                </select>
                <i class="bx bxs-group"></i>
            </div>

essa foi a parte do código que mudou, pois eu já coloquei a função la em cursos:

<select id="curso" class="input-field" onchange="updateTurmaOptions()" required>

e também as opções:

            <div class="input-box">
                <select id="curso" class="input-field" onchange="updateTurmaOptions()" required>
                    <option value="" selected disabled>Curso</option>
                    <option value="meio_ambiente">Meio Ambiente</option>
                    <option value="edificacoes">Edificações</option>
                    <option value="informatica">Informática</option>
                </select>
                <i class="bx bxs-school"></i>
            </div>

então sei que algum deve nem fazer ideá oque esse 'oncharge' faz então aqui uma explição sobre:

O evento change é acionado para os elementos, e quando uma alteração no valor do elemento é confirmada pelo usuário.

onChange
O evento onChange é utilizado para ser realizada determinada ação após alguma mudança.

Sendo bem sincero estudem isso a parte é muito interessante, aqui um site apoio ótimo:

Site: https://www.devmedia.com.br/trabalhando-com-eventos-em-javascript/28521#:~:text=usando%20evento%20onLoad-,onChange,clicarmos%20fora%20do%20input%20text.

Bom agora explicando a função (ódio, raiva, rancor,ira, etc.):

        function updateTurmaOptions() {
            var cursoSelect = document.getElementById("curso");
            var turmaSelect = document.getElementById("turma");
            var selectedCurso = cursoSelect.value;
            turmaSelect.innerHTML = "";

            if (selectedCurso === "edificacoes") {
                var turmas = ["ED-11", "ED-12", "ED-21", "ED-22", "ED-31", "ED-32", "ED-41"];
            } else if (selectedCurso === "informatica") {
                var turmas = ["EI-11", "EI-12", "EI-21", "EI-22", "EI-31", "EI-32", "EI-41"];
            } else if (selectedCurso === "meio_ambiente") {
                var turmas = ["EMA-11", "EMA-12", "EMA-21", "EMA-22", "EMA-31", "EMA-32", "EMA-41"];
            }

            for (var i = 0; i < turmas.length; i++) {
                var option = document.createElement("option");
                option.value = turmas[i];
                option.text = turmas[i];
                turmaSelect.appendChild(option);
            }
        }

De maneira menos técnica ela ira receber os elementos do html pelo getelementeById, após ira armazenar, isso dependendo de qual curso escolha será criado uma lista, após ela ira para um for que ira percorrer cada elemento de turmas, assim ira criar elementos de opções através dos elementos das listas, MEU DEUS QUE CONFUSO.

Fique com a explicação da IA bem melhor:

Essa função chamada updateTurmaOptions é responsável por atualizar as opções disponíveis em um elemento select (caixa de seleção) chamado "turma", com base na opção selecionada em outro elemento select chamado "curso".

Aqui está uma explicação detalhada do que a função faz:

Ela começa obtendo as referências para os elementos HTML com os IDs "curso" e "turma" usando o método getElementById. Esses elementos devem existir no documento HTML onde o script está sendo executado.

Em seguida, o valor selecionado do elemento "curso" é armazenado na variável selectedCurso.

O conteúdo do elemento "turma" é limpo, removendo todos os seus elementos filhos. Isso é feito atribuindo uma string vazia para a propriedade innerHTML do elemento "turmaSelect".

A função verifica o valor de selectedCurso usando declarações condicionais (if e else if) para determinar qual conjunto de turmas deve ser usado. Se selectedCurso for igual a "edificacoes", um array chamado turmas é criado com as opções de turmas para o curso de edificações. Se for igual a "informatica", o array turmas é preenchido com as opções de turmas para o curso de informática. Se for igual a "meio_ambiente", o array turmas é preenchido com as opções de turmas para o curso de meio ambiente.

Após determinar o conjunto de turmas com base no curso selecionado, a função inicia um loop for para percorrer cada elemento do array turmas.

Dentro do loop, a função cria um novo elemento option usando o método createElement. Esse elemento representa uma opção dentro do elemento select "turma".

O valor e o texto de cada opção são definidos com base no elemento atual do array turmas. O valor e o texto são iguais, contendo a identificação da turma.

A opção recém-criada é adicionada ao elemento "turma" usando o método appendChild. Isso faz com que a opção apareça na lista suspensa do elemento select "turma".

Após o loop, a função termina, e as opções do elemento "turma" foram atualizadas com base na opção selecionada no elemento "curso".

Essa função é geralmente usada em combinação com um evento de mudança (por exemplo, quando o valor selecionado no elemento "curso" é alterado) para atualizar dinamicamente as opções disponíveis no elemento "turma" conforme o curso selecionado.


(desculpas por apelar para IA, mas é complicado demais)

bom então essas foram as alterações no código.

Há eu também mudei o nome de alguns é coloquei tudo como obrigatório.

Agora no css eu criei a barra de rolagem:

}
.elemento-com-barra-de-rolagem {
    max-height: 400px; /* Agora essa porra fica invisivel desgraçaaaaa */
    overflow-y: auto;
}
.register-container {
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: transparent transparent;
}

.register-container::-webkit-scrollbar {
    width: 6px;
}

.register-container::-webkit-scrollbar-thumb {
    background-color: transparent;
}

.register-container::-webkit-scrollbar-track {
    background-color: transparent;
}

/* FOIIIII E NÃOOO FOIIIII ODIO RAIVA RANCOR REMORSO DEPRESSÃO COLERA  */


basicamente é uma barra de rolagem só que esta transparente apenas (ódio, raiva, rancor, ira)

no código eu coloquei ela só em cadastro, pois ficou imenso:
<div class="register-container elemento-com-barra-de-rolagem" id="register">

a eu tambem personalizei as setas das opções:
.input-field select {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background-color: #f5f5f5;
    border: none;
    padding: 10px;
    font-size: 16px;
    color: #333;
    border-radius: 4px;
    width: 100%;
    cursor: pointer;
}

.input-field select:hover {
    background-color: #e0e0e0;
}

.input-field select:focus {
    outline: none;
    box-shadow: 0 0 0 2px rgba(63, 81, 181, 0.3);
}

.input-field option {
    color: #333;
}

.input-field option:checked {
    background-color: #3f51b5;
    color: #fff;
}

/* Estilo personalizado para o botão de seta */
.select-icon {
    position: absolute;
    top: 50%;
    right: 10px;
    transform: translateY(-50%);
    pointer-events: none;
    color: #999;
}

É também foi necessário aumentar um pouco a div de registro, pois estava cortando.

Por enquanto é só talvez eu mexo mais ainda hoje.

Victor Hugo

10/07/2023
